===============================================================================
2024-12-03 First steps with ansible

Copied terraform files from my aws-salt module, and cut them way down to
create a single instance with a security group that allows in ssh, http, and
ping from outside.

Installed ansible with 
sudo apt install ansible-core -y

In my terraform directory created a make target "inventory" that builds the
inventory file in ansible/inventory.ini

So the following work in the ansible directory:
ansible-inventory -i inventory.ini --list
ansible --user ubuntu myhosts -m ping -i inventory.ini

I created a simple playbook (from the Ansible documentation site):
--- playbook.yml
- name: My first play
  hosts: myhosts
  tasks:
   - name: Ping my hosts
     ansible.builtin.ping:

   - name: Print message
     ansible.builtin.debug:
       msg: Hello world
---

Then this works as advertised in the tutorial:
ansible-playbook --user ubuntu -i inventory.ini playbook.yaml

Installed the nginx collection:
ansible-galaxy collection install nginxinc.nginx_core

Then run the playbook to create a default nginx server:
ansible-playbook --user ubuntu -i inventory.ini ~/.ansible/collections/ansible_collections/nginxinc/nginx_core/playbooks/deploy-nginx-web-server.yml

This gets through all the testing and verification steps, but errors out with
a permissions error on the actual apt install portion.
---
fatal: [3.81.108.168]: FAILED! => {"changed": false, "msg": "Failed to lock apt for exclusive operation: Failed to lock directory /var/lib/apt/lists/: E:Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)"}
---

I think I have to tell it to use sudo (using the "become" method).

Yeah, that was the problem.  This works:
ansible-playbook --become --user ubuntu -i inventory.ini ~/.ansible/collections/ansible_collections/nginxinc/nginx_core/playbooks/deploy-nginx-web-server.yml

And issuing a curl to that address returns the default nginx web page.

This is already a LOT easier than dealing with SaltStack.  We will see what
other hurdles we find with Ansible though.



